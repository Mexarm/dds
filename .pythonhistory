r = mg_get_domains()
r
dir(r)
r.content
r.content.itemÂ¨s~{0~
r.content.item[0].name
r.content.items[0].name
r.json()
r.content
r.json().items[0].name
r.json().[items][0].name
r.json()[items][0].name
(r.json())[items][0].name
(r.json())[items]
d=r.json()
d
d['items']
r
r.json()
d['items'][0]
d['items'][0]['state']
r=mg_get_domains()
res_dict=Storage(res.json())
res_dict=Storage(r.json())
res_dict
res_dict.items
res_dict.total_count
res_dict._items
res_dict.items
res_dict.items()
r
d = r.json()
d['items']
for i in d['items']:
    print i['name']
r=mg_get_campaigns(myconf.get('mailgun.domain'))
r
r.content
print r.content
list_campaigns(r)
campaigns_list(r)
c=db(db.campaign.id>0).select()
c
c[0]
c[0].fm
print c[0].fm
import pickle
fm=pickle.loads(c[0].fm)
fm
fm.current_state
print (fm.pformat())
fm.current_state='live'
fm.states
import pickle
FM
FM.states
print (FM.pformat())
import inspect
from inspect import getsoucelines
from inspect import getsourcelines
getsourcelines(FM.add_transition)
getsource(FM.add_transition)
inspect.getsource(FM.add_transition)
print(inspect.getsource(FM.add_transition))
print(inspect.getsource(FM.state))
print(inspect.getsource(FM.add_state))
print FM.pformat()
fm,fmh = get_fm(3)
fm,fmh = get_FM(3)
fm
fmh
fm.current_state
fm._transitions
fm._transitions[fm.current_state]
store_FM(3,FM,None)
fm,fmh = get_FM(3)
fm._transitions[fm.current_state]
fm,fmh = get_FM(3)
store_FM(3,FM,None)
fm,fmh = get_FM(3)
fm._transitions[fm.current_state]
fm._transitions[fm.current_state].keys()
fm._transitions['in approval']
fm._transitions['in approval'].keys()
[o in fm._transitions['in approval'].keys() if o[0] != "_"]]
[o in fm._transitions['in approval'].keys() if o[0] != "_"]
[o if o[0] != "_" for o in_transitions['in approval'].keys() ]
[o for o in_transitions['in approval'].keys() ]
[o for o in fm._transitions['in approval'].keys() ]
[o for o in fm._transitions['in approval'].keys() if o[0] == "a" ]
[o for o in fm._transitions['in approval'].keys() if o[0] != "_" ]
fm,fmh = get_FM(3)
get_FM_user_options(fm)
exit()
fm,fmh = get_FM(3)
get_FM_user_options(fm)
fm.process_event(get_FM_user_options(fm)[0])
get_FM_user_options(fm)
datetime
from datetime import now
from datetime import nowdatetime
import datetime
dir(datetime)
dir(datetime.datetime)
from datetime import datetime
datetime.now
datetime.now()
str(datetime.now())
fm.process_event('no mames')
fm,fmh = get_FM(3)
fm,fmh = FM_get(3)
print fm.pformat()
FM_process_event(fm,fmh,'validate documents')
fmh
FM_process_event(fm,fmh,'validate documents')
fm=FM.copy()
fmh = None
FM_process_event(fm,fmh,'validate documents')
fm.initialize()
FM_process_event(fm,fmh,'validate documents')
fmh = []
fm=FM.copy()
fm.initialize()
FM_process_event(fm,fmh,'validate documents')
fmh
fm,fmh = FM_get(3)
FM_process_event(fm,fmh,'validate documents')
fmh
import inspect
print inspect.getsource(FM_process_event)
fm,fmh = FM_get(3)
FM_process_event(fm,fmh,'validate documents')
fmh
FM_store(3,fm,fmh)
fm,fmh = FM_get(3)
print(fm.pformat())
session
session.user
auth.user
db(db.campaign.id>0).select()[0].id
FM_store(4,FM,[])
FM_process_event(4,'validate documents')
fm,fmh = FM_get(4)
fmh
FM
print FM.pformat()
unquote
l = list()
l += 'hola'
l
l = list()
l
l += ['hola']
l
r = mg_get_campaigns('wedeliver.com.mx')
get_campaign(r,'Test Campaign')
get_campaign(r,'Test Campaign')['id']
get_campaign(mg_get_campaigns('wedeliver.com.mx'),'Test Campaign')
get_campaign(mg_get_campaigns(u'wedeliver.com.mx'),u'Test Campaign')
r = db.campaign(db.campaign.id>0)
r
count(r)
r.id
FM_store(3,FM,[])
j = "{ 'name' : 'armando' }"
d= dict(id=1)
d
d.update(j)
import json
json.parse(j)
json.loads(j)
j = "{'name':'armando'}"
json.loads(j)
j = '{"name":"armando"}'
json.loads(j)
type(json.loads(j))
import requests
regster_on_db(3)
r=register_on_db(3)
regster_on_db(3)
r=register_on_db(3)
s = db.campaign(3)
s
type (s)
type (s.select())
s = db.campaign(3).select()
s = db(db.campaign.id == 3).select()
type (s)
s
print s
s
s = db.campaign(3).select()
s = db.campaign(3
)
type (s)
s
s.doc
dir (s.doc)
s.doc.select()
print s.doc.select()
db(db.doc.id>0)
db(db.doc.id>0).count()
db.doc(db.doc.id>0).count()
db.doc(id>0).count()
db.doc().count()
db.doc()
db.doc(1)
db.doc(1).retrieve_code
db.doc(1).retrieve_code.select()
db.doc(1).retrieve_code.count()
db.doc.truncate()
db.commit()
db.doc(db.doc.id>0).count()
db(db.doc.id>0).count()
register_on_db(3)
\
register_on_db(3)
db.doc()
db.doc().select()
db(db.doc.id>0)
db(db.doc.id>0).oount()
db(db.doc.id>0)
db(db.doc.id>0).count()
db(db.doc.id>0).select()
print db(db.doc.id>0).select()
line='"record_id","object_name","email_address","client_name","client_lastname1","client_lastname2","client_acct_no","email_subject","email_body","checksum","file_size","download_limit"'
line
hdr_list=[ unquote(f).strip().lower() for f in line.split(sep)]
sep=','
hdr_list=[ unquote(f).strip().lower() for f in line.split(sep)]
hdr_list
line='"record_id","object_name","email_address","client_name","client_lastname1","client_lastname2","client_acct_no","email_subject","email_body","checksum","file_size","download_limit"\n'
hdr_list=[ unquote(f).strip().lower() for f in line.split(sep)]
hdr_list
line.split(sep)
line
hdr_list=[ unquote(f).strip().lower() for f in line.strip('\n').split(sep)]
hdr_list
hdr_list=[ f.strip().lower() for f in line.strip('\n').split(sep)]
hdr_list
hdr_list=[ f.strip('"').strip().lower() for f in line.strip('\n').split(sep)]
hdr_list
line
line2= line[0] + "   " + line[1:]
line2
hdr_list=[ f.strip('"').lower() for f in line.strip('\n').split(sep)]
hdr_list
hdr_list=[ f.strip().lower() for f in line.strip('\n').split(sep)]
hdr_list
hdr_list=[ f.strip().lower() for f in line2.strip('\n').split(sep)]
hdr_list
hdr_list=[ f.strip('"').lower() for f in line2.strip('\n').split(sep)]
hdr_list
hdr_list=[ f.strip('"').strip().lower() for f in line2.strip('\n').split(sep)]
hdr_list
r = validate_files2(3)
url_key
r = validate_files2(3)
r
q
r = requests.get('https://github.com/frappe/erpnext222222')
r
r.status_code
dir(r)
r.text
r.ok
r.raw
r.raw()
r.headers
r.content
r.json()
r.request
db.campaign.truncate()
db.commit()
db.scheduler_task.truncate()
db.scheduler_run.truncate()
db.commit()
r = register_on_db(1)
q = ((db.doc.campaign == 1) & (db.doc.status == doc_local_states[1]))
q
s = db(q)
s
sum = db.doc.total_campaign_bytes.sum()
db.doc.fields
sum = db.doc.bytes.sum()
db(q).select(sum).first()[sum]
print db(q).select(sum).first()[sum]
print db(q).select(sum).first()
db().select(db.doc.bytes)
db(q).select(db.doc.bytes)
db(q).select()
db(db.doc.id>0).select()
q
db(q).count()
BR()
BUTTON()
b = get_fm_action_buttons(1)
str(BUTTON())
print BUTTON()
print BR()
print SPAN(BUTTON(),BR())
HTML(BUTTON(),BR())
print HTML(BUTTON(),BR())
XML(BUTTON(),BR())
print XML(BUTTON(),BR())
str(BUTTON())+ str(BR())
print  DIV(BUTTON(),BUTTON)
print  DIV(BUTTON(),BUTTON())
l = [BUTTON('B1'), BUTTON('B2')]
DIV (*L)
DIV (*l)
print DIV (*l)
print FORM (*l)
print XML (*l)
print XML(*l)
print XML(DIV(*l))
b = get_fm_action_buttons(1)
l = [BUTTON('B1'), BUTTON('B2')]
b = get_fm_action_buttons(1)
b
print b
create_validate_docs_tasks(1)
db.commit()
create_validate_docs_tasks(1)
cf_validate_doc(1)
cf_validate_doc(1,1)
cf_validate_doc(1,'test100')
cf_validate_doc(1)
db.event_data(51)
db(db.event_data.doc == 1).select()
print db(db.event_data.doc == 1).select()
datetime.timedelta
datetime.timedelta(minutes=15)
datetime.timedelta(m=15)
datetime.now()
datetime.datetime.now()
db(db.doc.status == DOC_LOCAL_STATES_OK[0])
db(db.doc.status == DOC_LOCAL_STATES_OK[0]))
db(db.doc.status == DOC_LOCAL_STATE_OK[0])
db(db.doc.status == DOC_LOCAL_STATE_OK[0]).select()
r = db(db.event_data.campaign ==1).select(limitby(0,1)).first()
task_progress
progress_tracking
progress_tracking()
ts = scheduler.task_status(1,output=True)
ts.status
ts
ts.scheduler_task.status
progress_tracking()
exit()
progress_tracking()
ts = scheduler.task_status(1,output=True)
ts.scheduler_task.name
ts.scheduler_task.function_name
exit()
ts.scheduler_task.function_name
progress_tracking()
c =  db(db.scheduler_task.status=='QUEUED').count()
c
c =  db(db.scheduler_task.function_name=='progress_tracking').delete()
c =  db((db.scheduler_task.function_name=='progress_tracking') & db.scheduler.status != 'RUNNING').delete()
c =  db((db.scheduler_task.function_name=='progress_tracking') & db.scheduler_taask.status != 'RUNNING').delete()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_taask.status != 'RUNNING')).delete()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
st = db(db.scheduler_task.function_name == 'progress_tracking').select(db.scheduler_task.start_time)
st
for d in st:
    print d.start_time
st = db(db.scheduler_task.function_name == 'progress_tracking').select(db.scheduler_task.start_time)
st
st = db(db.scheduler_task.function_name == 'progress_tracking').select(db.scheduler_task.start_time)
st
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
c
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c =  db((db.scheduler_task.function_name=='progress_tracking') & (db.scheduler_task.status != 'RUNNING')).delete()
db.commit()
c = db(db.campaign.id==2).select(limitby=(0,1)).first()
c.total_campaign_recipients
progress_tracking
progress_tracking()
exit()
progress_tracking()
c = db(db.campaign.id==2).select(limitby=(0,1)).first()
c.total_container_objects
c.fields()
db.campaign.fields
exit()
progress_tracking()
exit()
progress_tracking()
exit()
progress_tracking()
exit()
progress_tracking()
db(db.campaign.id>0).select()
db(db.campaign.id>0).select().first().id
c = get_campaign(1)
c
c.tasks
c.status_progress
c.status_progress = 0.0
c.update_record()
db.commit()
)
db.commit()
c.status_progress
validating_documents_progress(1)
c.tasks
ts = scheduler.task_status(5,output=True)
ts.scheduler_task.function_name
ts.scheduler_task.status
vd = db((db.event_data.campaign == 1) & (db.event_data.event_type == 'cf_validate_doc')).count()
vd
exit()
vd = db((db.event_data.campaign == 1) & (db.event_data.event_type == 'cf_validate_doc')).count()
vd
c=get_campaign(1)
vd / c.total_campaign_recipients
validating_documents_progress(campaign_id)
validating_documents_progress(c.id)
c.tasks
ts=scheduler.task_status(3)
ts
ts.scheduler_task.task_status
ts.scheduler_task.status
ts=scheduler.task_status(3,output=True)
ts.scheduler_task.function_name
ts.scheduler_task.status
p2 = vd / float(c.total_campaign_recipients)
p2
exit()
c = get_campaign(1)
c.status_progress == 100.0
validating_documents_change_status(1)
c.status
cnv = db(db.doc.status == DOC_LOCAL_STATE_ERR[0]).count()
cnv
exit
exit()
validating_documents_change_status(1)
exit()
d1 = get_doc(1)
import json
j=json.dumps(dict(d1))
d1
d1 = db.doc(1)
d1
d1 = db(db.doc.id == 1).select(limitby=(0,1)).first()
d1
d1 = db(db.doc.id == 1).select().first()
d1
d1.json
d1.json['object name']
d1.json[u'object name']
d1j = json.loads(d1.json)
d1j = d1.json
type (d1j)
types
type.name
dir(type(d1j))
type(d1j).items
type(d1j).items()
type(d1j).items(0)
ls
ll
l
exit
exit()
r = get_rcode(1,1)
exit()
r = get_rcode(1,1)
r
exit()
c = get_campaign(1)
SERVICE_TYPE.indexof(c.service_type)
SERVICE_TYPE.index(c.service_type)
SERVICE_TYPE.get(0)
SERVICE_TYPE.get_item(0)
SERVICE_TYPE.item(0)
dir(SERVICE_TYPE)
c
c.logo
exit()
c=get_campaign(1)
save_image(c.logo)
exit()
c=get_campaign(1)
save_image(c.logo)
exit()
dict(_from='x')
dict(from='x')
dict(from_='x')
dict(__from='x')
dict(from='x')
exit()
r = mg_send_message(1)
import inspect
dir(inspect)
print inspect.getsource(mg_send_message)
print inspect.getsource(send_doc)
exit()
r=send_doc(1,to='mexarm@me.com')
exit()
r=send_doc(1,to='mexarm@me.com')
exit()
r=send_doc(1,to='mexarm@me.com')
exit()
r=send_doc(1,to='mexarm@me.com')
from gluon.template import render
a=P('Hola')
a
str(a)
render(str(a),context=dict(myvar='Armando'))
a=P('Hola {{=myvar}}')
render(str(a),context=dict(myvar='Armando'))
c=get_campaign(1)
s.email_subject
c.email_subject
a=c.email_subject
render(str(a),context=dict(myvar='Armando'))
type(render(str(a),context=dict(myvar='Armando')))
exit()
r=send_doc(1,to='mexarm@me.com')
exit()
r=send_doc(1,to='mexarm@me.com')
c
c=get_campaign(1)
c.email_body
c.email_html
c.html_body
exit()
r=send_doc(1,to='mexarm@me.com')
r
r.json()
exit()
c = get_campaign(1)
c.email_subject
d = get_doc(100)
d.json
c.email_subject = 'Estado de Cuenta ({{=client_acct_no}})'
c.update_record()
db.commit()
r = send_doc(100,to='mexarm@me.com')
r
import inspect
print inspect.getsource(send_doc)
exit()
render
s = render('xxxx',conext=None)
s = render('xxxx',context=None)
s = render('xxxx {{=var1}}',context={})
import traceback
s = render('xxxx {{=var1}}',context={})
sys
import sys
s = render('xxxx {{=var1}}',context={})
t,v,t = sys.exc_info()
t,v,tb = sys.exc_info()
traceback.print_tb(tb)
traceback.print_tb(tb,limit=1,file=sys.stdout)
s = render('xxxx {{=var1}}',context={})
t,v,tb = sys.exc_info()
traceback.print_tb(tb,limit=1,file=sys.stdout)
exit()
c = get_campaign(1)
c.email_subject
c.email_subject = '{{=subject}}'
r = c.update_record()
db.commit()
r =send_doc(100)
exit()
c = get_campaign(1)
c.email_subject = '{{=subject}}'
r = c.update_record()
db.commit()
r =send_doc(100)
exit()
c = get_campaign(1)
options = FM_get_user_options(FM_get(c)[0])
(FM_get(c)[0])
FM_get(c)
c.fm
print c.fm
fm2 = FM.copy()
fm2.process_event('validate documents')
fm2.initialize()
fm2.process_event('validate documents')
fm2.pformat()
print fm2.pformat()
fm2.process_event('validate documents')
fm2.process_event('_valid docs')
print fm2.pformat()
fmstr1 = c.fm
fmstr2 = pickle.dumps(fm2)
import difflib
difflib.ndiff(fmstr1,fmstr2)
print difflib.ndiff(fmstr1,fmstr2)
a= fmstr1
b=fmstr2
for i,s in enumerate(difflib.ndiff(a, b)):
        if s[0]==' ': continue
        elif s[0]=='-':
            print(u'Delete "{}" from position {}'.format(s[-1],i))
        elif s[0]=='+':
            print(u'Add "{}" to position {}'.format(s[-1],i))    
f1 = pickle.loads(a)
f1 = pickle.loads(b)
exit()
u = db(db.auth.user.id==1).select()
u = db(db.auth_user.id==1).select()
u
u = u.first()
u
u.registration_key =''
u.update_record()
db.commit()
exit
exit()
doc_id = db((db.doc.campaign == 1) & (db.doc.status == 'cf validated')).select(limitby=(0,1)).id
doc_id = db((db.doc.campaign == 1) & (db.doc.status == 'cf validated')).select(limitby=(0,1)).first().id
doc_id
r = send_doc(doc_id,to=get_campaign(campaign_id).test_address)
r = send_doc(doc_id,to=get_campaign(1).test_address)
exit()
doc_id = db((db.doc.campaign == 1) & (db.doc.status == 'cf validated')).select(limitby=(0,1)).first().id
doc_id
r = send_doc(doc_id,to=get_campaign(1).test_address)
doc_id = db((db.doc.campaign == 1) & (db.doc.status == 'cf validated')).select(limitby=(0,1)).first().id
r = send_doc(doc_id,to=get_campaign(1).test_address)
exit()
doc_id = db((db.doc.campaign == 1) & (db.doc.status == 'cf validated')).select(limitby=(0,1)).first().id
r = send_doc(doc_id,to=get_campaign(1).test_address)
send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
send_doc(1,to='armando.hernandez.marin@gmail.com')
exit()
ls
send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
exit()
send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
exit()
send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
aa
bb = aa if 'aa' in locals() else None
bb
aa='hello'
bb
bb = aa if 'aa' in locals() else None
bb
exit()
send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
exit()
send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
r
r=send_doc(1,to='armando.hernandez.marin@gmail.com')
exit()
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
r=send_doc(1,to='armando.hernandez.marin@gmail.com')
r
dir(r)
r.status_code
type(r.status_code)
res.json
r.json()
r2=send_doc(1,to='armando.hernandez.marin@gmail.')
r2
r2.json()
d1 = dict(a=1, b='2')
d2 = d1
d2['c']=3.0
d1
exit()
ed = event_data(dict(doc=1,event_type='test',category='info'))
ed = event_data(ddoc=1,event_type='test',category='info')
exit()
ed = event_data(ddoc=1,event_type='test',category='info')
ed = event_data(doc=1,event_type='test',category='info')
exit()
ed = event_data(doc=1,event_type='test',category='info')
exit()
ed = event_data(doc=1,event_type='test',category='info')
db.event_data.fields
exit()
ed = event_data(doc=1,event_type='test',category='info')
ed
db.commit()
r3
r2
r=send_doc(1,to='armando.hernandez.marin@gmail.com')
r
dir(r)
r.request
dir(r.request)
r.request.url
repr(r.request)
str(r.request)
r.request.prepare_body
r.request.prepare_body()
r.request.body
print r.request.body
PuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTYPuTTY
dir(r.request)
dir(r)
r.contect
r.content
r.text
dir(r.request)
r.request.url
r.request.path_url
r.request.method
dir(r)
r.history()
r.history
r.links
r.raw
r.reason
exit()
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
exit()
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
exit()
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
db.commit()
r.json()
exit()
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
r
db.commit()
exit()
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
exit()
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
r
exit()
r
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
r
db.commit()
exit()
r=send_doc_wrapper(1,to='armando.hernandez.marin@gmail.com')
r
db.commit()
exit
exit()
u = db.auth_user(1)
u.status
u
u.registration_key=''
u.update_record()
db.commit()
exit()
send_test(1)
exit()
send_test(1)
exit()
send_test(1)
db.commit()
exit()
f = FM_process_event(1,'send test')
f
db.commit()
exit()
import html2text
c = get_campaign(1)
text = html2text.html2text(c.html_body)
text = html2text.html2text(unicode(c.html_body))
text = html2text.html2text(html.decode(c.html_body))
b = c.html_body
len(b)
b.decode('utf-8')
text = html2text.html2text(b.decode('utf-8'))
text
print text
doc = get_doc(1)
exit()
t= schedule_launch_campaign(1)
db.scheduler_task.fields
exit()
t= schedule_launch_campaign(1)
exit()
t= schedule_launch_campaign(1)
t
db.commit()
exit()
r = send_doc(1,to='mexarm@me.com')
exit()
r = send_doc(1,to='mexarm@me.com')
r
db.commit()
exit()
r=send_doc(1,to='armando.hernandez@qp.com.mx')
exit()
r=send_doc(1,to='armando.hernandez@qp.com.mx')
exit()
r=send_doc(1,to='armando.hernandez@qp.com.mx')
exit()
r=send_doc(1,to='armando.hernandez@qp.com.mx')
r=send_doc(1,to='cesar.roman@qp.com.mx')
exit()
u = db.auth_user(1)
u
u.registration_key =''
u.update_record()
db.commit()
exit()
os.listdir(path.join(request.folder,'index_files/'))
import od
import os
os.listdir(path.join(request.folder,'index_files/'))
exit
exit()
r = register_on_db(1)
r
r.hdr_list
dir (r)
r.keys()
r.hdr_list
r['hdr_list']
REQUIRED_FIELDS
h=r['hdr_list']
sr = set (REQUIRED_FIELDS)
sh = set(h)
sr < sh
sr
sh
sr <= sh
sr >= sh
sr.issubset(sh)
s & t
sr & sh
r['hdr']
hdr.strip('\n')
r['hdr'].strip('\n')
r['hdr'].strip('\n').strip('\r')
exit()
r = register_on_db(1)
r
exit()
u = db.auth_user(1)
u.registration_key
u.registration_key = ''
u.update_record()
db.commit()
exit()
r = cf_validate_doc(1)
r
d = get_doc(1)
d
db(db.doc.campaign == 1).update(status == 'validating')
db(db.doc.campaign == 1).update(status = 'validating')
db.commit()
r = cf_validate_doc(1)
r
exit()
u = db.auth_user(1)
u.registration_key = ''
u.update_record()
db.commit()
exc
e = exc.NoSuchObject('sssssssssss')
e
e.message
type(e.message)
exit()
u = db.auth_user(1)
u.registration_key = ''
u.update_record()
db.commit()
exit
exit()
reset_campaign_progress(2)
db.commit()
validate_documents(2)
exit()
r = db(db.campaign.id == 2).delete()
r
db.commit()
exit()
validate_documents(3)
exit()
c = get_credentials()
c = get_credentials_storage()
c
r = requests.get("https://api.mailgun.net/v3/wedeliver.com.mx/events",auth=("api",c.api_key))
r
r.json()
r.reason
c.api_key
r = requests.get("https://api.mailgun.net/v3/wedeliver.com.mx/events",auth=(c.username,c.api_key))
r
r = requests.get("https://api.mailgun.net/v3/wedeliver.com.mx/events",auth=("api",myconf.get('mailgun.api_key'))
)
r
r.json()
r.json().keys
r.json().keys()
r.json().keys().paging
r.json()..paging
r.json().paging
r.json()['paging']
r.json()['items'].keys()
r.json()['items']
len(r.json()['items'])
r.json()['items'][0]
r.json()['items'][0].keys()
r.json()['items'][0].event
r.json()['items'][0]['event']
r.json()['items'][0]['message]
r.json()['items'][0]['message']
r.json()['items'][0]['message']['headers']['message-id']
db(db.doc.mailgun_id ==r.json()['items'][0]['message']['headers']['message-id']).select().first()
d= db(db.doc.mailgun_id ==r.json()['items'][0]['message']['headers']['message-id']).select().first()
d
d= db(db.doc.mailgun_id == ('<'+r.json()['items'][0]['message']['headers']['message-id']+'>').select().first()
.
)
d= db(db.doc.mailgun_id == ('<'+r.json()['items'][0]['message']['headers']['message-id']+'>')).select().first()
d
r = mg_get_campaigns('wedeliver.com.mx')
r
r.json()
r.json()['items'][0]
db(db.doc.campaign == 4).select(db.doc.bytes.sum()).first()
db(db.doc.campaign == 4).select(db.doc.bytes.sum()).first()[sum]
sum=db.doc.bytes.sum()
sum
db(db.doc.campaign == 4).select(sum).first()
db(db.doc.campaign == 4).select(sum).first()[sum]
db(db.doc.campaign == 4).select(sum).first()['_extra']
db(db.doc.campaign == 4).select(sum).first()['_extra']['SUM(doc.bytes)']
r.json()['items']
exit()
mg_update_local_campaigns_stats()
exit()
mg_update_local_campaigns_stats()
c= mg_get_campaigns('wedeliver.com.mx')
c
c.json()
c.json()['items']
for i in c.json()['items']:
    print i
d='wedeliver.com.mx'
for i in mg_get_campaigns(d).json()['items']:
 print i
mg_update_local_campaigns_stats()
exit()
mg_update_local_campaigns_stats()[B
db().select(db.campaign.mg_campaign_id, distinct=True)
exit()
mg_update_local_campaigns_stats()
db.commit()
exit()
ls
db(db.campaign.id>0).select(db.campaign.id,db.campaign.mg_campaign_name)
cs=db(db.campaign.id>0).select(db.campaign.id,db.campaign.mg_campaign_name)
print cs
r = mg_update_local_campaign_stats(4)
exit()
r = mg_update_local_campaign_stats(4)
exit()
r = mg_update_local_campaign_stats(4)
r
r.json()
exit()
auth.user
r = db().select(db.campaign.ALL)
r
r[0].created_by
rows = db(db.campaign.created_by==1).select(db.campaign.ALL,limitby=limitby,orderby=[~db.campaign.modified_on,db.campaign.created_on])
limitby=(0,1)
rows = db(db.campaign.created_by==1).select(db.campaign.ALL,limitby=limitby,orderby=[~db.campaign.modified_on,db.campaign.created_on])
rows
rows[0]
exit
exit()
db.campaign.fields
BEAUTYFY(db.campaign.fields)
BEAUTIFY(db.campaign.fields)
BEAUTIFY(db.campaign.fields).xml()
str(BEAUTIFY(db.campaign.fields))
str(BEAUTIFY(db.campaign.fields).flatten())
Field()
Field
dir(Field)
inspect
exit()
inspect
import inspect
inspect.getsource(Field)
pritn (inspect.getsource(Field))
print (inspect.getsource(Field))
print(db.campaign.fields)
db.campaign.fields
db.campaign.fields[0]
type(db.campaign.fields[0])
dir(db.campaign)
db.campaign
db.campaign['id']
exit()
